
# This is a basic workflow to help you get started with the Run C/C++test action for a CMake-based project.
name: Unit Testing with Code Coverage

on:
  # Triggers the workflow on push request events but only for the master (main) branch.
  push:
    branches: [ master, main ]

  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:

env:
  LINE_COV_GATE: 0
  MCDC_COV_GATE: 0
  DTP_PROJECT: CovGoogleTest

permissions:
  contents: read
  pages: write
  id-token: write
  security-events: write
  # only required for workflows in private repositories
  actions: read
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  run-cpptestct-cmake:
    name: Analyze project with C/C++test CT

    # Specifies the type of runner that the job will run on.
    runs-on: self-hosted

    environment: github-pages

    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:

      - name: Clean up previous build
        run: |
          rm -rf .build/CMakeCache.txt

      # Checks out your repository under $GITHUB_WORKSPACE, so that your job can access it.
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set build id
        shell: bash
        working-directory: ${{github.workspace}}
        run: echo "build_id=build-$(date +'%Y-%m-%d-%H-%M')" >> $GITHUB_ENV
      
      - name: Configure Project
        run: |
          cmake -DCPPTEST_COVERAGE=ON -S /mnt/c/Users/syoung/Documents/CppTestLinux/cpptest-ct/examples/CovGoogleTest -B /mnt/c/Users/syoung/Documents/CppTestLinux/cpptest-ct/examples/CovGoogleTest/.build

      # Builds your CMake project. (This step is optional, as it is not required for code analysis).
      # - name: Build Project
      #   run: |
      #     cmake --build .build -j24

      - name: Create required directories
        run: |
          mkdir -p /mnt/c/Users/syoung/Documents/CppTestLinux/cpptest-ct/examples/CovGoogleTest/.build/cpptest-coverage/CovGoogleTest/.cpptest

      - name: Run Unit Tests
        run: |
          # rm -rf build/cpptest-coverage/CovGoogleTest/CovGoogleTest.clog
          # rm -rf build/gtest_results.xml
          # cmake --build .build
          # ctest VERBOSE=1 --gtest_filter="GooTest" --gtest_output=xml:build/gtest_results.xml

          bash -c 'cmake --build .build && cd .build && rm -rf cpptest-coverage/CovGoogleTest/CovGoogleTest.clog && ctest || true && make cpptestcov-compute cpptestcov-suppress cpptestcov-report' 

      # Builds your CMake project. (This step is optional, as it is not required for code analysis).
      # - name: Compute Coverage
      #   working-directory: ${{github.workspace}}/build
      #   run: |
      #     cpptestcov-compute -map cpptest-coverage/CovGoogleTest/.cpptest -clog cpptest-coverage/CovGoogleTest/CovGoogleTest.clog -out .coverage

      - name: Report Coverage to Console
        working-directory: ${{github.workspace}}/.build
        run: |
          bash -c 'cd .build;make cpptestcov-suppress cpptestcov-report'

      # - name: Compute Index for VS Code
      #   working-directory: ${{github.workspace}}/.build
      #   run: |
      #     bash -c 'cd .build;make cpptestcov-suppress cpptestcov-index'

      - name: Generate Coverage Reports
        working-directory: ${{github.workspace}}/.build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run:  make cpptestcov-report

      # - name: Publish Reports to DTP
      #   working-directory: ${{github.workspace}}/.build
      #   shell: bash
      #   # Execute the build.  You can specify a specific target with "--target <NAME>"
      #   run:  cpptestcov-report dtp -property build.id=${build_id} -property dtp.project=${DTP_PROJECT} .coverage gtest_results.xml
        
      # - name: Setup Pages
      #   uses: actions/configure-pages@v5
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload coverage reports
          path: ${{github.workspace}}/.coverage
        
      - name: Archive reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: CpptestCTReports
          include-hidden-files: true
          path: |
            .coverage/*.*

      # - name: Deploy to GitHub Pages
      #   id: deployment
      #   uses: actions/deploy-pages@v4
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}

      - name: Show Coverage HTML Link
        shell: bash
        run: echo "Check html report https://parasoft-se.github.io/CovGoogleTest/coverage.html"
        
      - name: Line Coverage Quality Gate
        working-directory: ${{github.workspace}}/.build
        shell: bash
        # Query for project's coverage and compare with the gate requirements
        run: |
          NUMBER=$(cpptestcov query -coverage LC .coverage) && if [ $NUMBER -lt $LINE_COV_GATE ]; then echo "LINE coverage quality gate failed"; echo "Expected result $LINE_COV_GATE%, echieved $NUMBER%"; false; else echo "LINE coverage quality gate passed with $NUMBER% (required $LINE_COV_GATE%)"; true; fi  
          echo "Check html report https://parasoft-se.github.io/CovGoogleTest/coverage.html"
        
      - name: MCDC Coverage Quality Gate
        working-directory: ${{github.workspace}}/.build
        shell: bash
        # Query for project's coverage and compare with the gate requirements
        run: |
          NUMBER=$(cpptestcov query -coverage MCDC .coverage) && if [ $NUMBER -lt $MCDC_COV_GATE ]; then echo "MCDC coverage quality gate failed"; echo "Expected result $MCDC_COV_GATE%, echieved $NUMBER%"; false; else echo "MCDC coverage quality gate passed with $NUMBER% (required $MCDC_COV_GATE%)"; true; fi  
          echo "Check html report https://parasoft-se.github.io/CovGoogleTest/coverage.html"

      
        
